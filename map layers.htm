<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Web Mapping</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />
    <style>
        #map {
            height: 600px;
        }
    </style>
</head>
<body>
    <div id="map"></div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-shpfile/0.1.0/leaflet.shpfile.js"></script>
    <script>
        // Initialize Leaflet map
        var map = L.map('map').setView([0.0806, 34.2455], 13);

        // Add OpenStreetMap tiles as base layer
        var osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Add satellite imagery as an additional layer
        var satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: 'Tiles &copy; Esri &mdash; Source: Esri',
        });

        // Create layer control
        var baseLayers = {
            "OpenStreetMap": osmLayer,
            "Satellite Imagery": satelliteLayer
        };

        // Add layer control to the map
        L.control.layers(baseLayers).addTo(map);

        // Initialize Leaflet.draw plugin
        var drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);
        var drawControl = new L.Control.Draw({
            draw: {
                polygon: true,
                polyline: true,
                rectangle: true,
                circle: true,
                circlemarker: false,
                marker: true
            },
            edit: {
                featureGroup: drawnItems,
                remove: true
            }
        });
        map.addControl(drawControl);

        // Handle drawn items
        map.on('draw:created', function(event) {
            var layer = event.layer;
            drawnItems.addLayer(layer);
        });

        // Function to save drawn features as shapefile
        function saveAsShapefile() {
            var data = drawnItems.toGeoJSON();
            shpwrite.download(data, 'drawn_features');
        }
    </script>
    <button onclick="saveAsShapefile()">Save as Shapefile</button>
</body>
</html>
